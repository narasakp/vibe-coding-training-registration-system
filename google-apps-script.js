// Google Apps Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô Google Apps Script

// Configuration
const CONFIG = {
  SPREADSHEET_ID: '1uI_TA9lR0RsLcakF_GGb7LsM5H8gR3XCnQuiWQ0NuUQ', // ‚úÖ Spreadsheet ID ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  EMAIL_TEMPLATE: {
    subject: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ‡∏≠‡∏ö‡∏£‡∏° AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î',
    fromName: 'CScpru: ‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° AI Coding'
  },
  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  WORKSHOP_INFO: {
    title: '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î',
    date: '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏ó‡∏µ‡πà 16 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568',
    time: '09:00 - 16:00 ‡∏ô.',
    format: 'Online ‡∏ú‡πà‡∏≤‡∏ô Zoom',
    maxParticipants: '500 ‡∏Ñ‡∏ô',
    // üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Zoom Meeting
    zoom: {
      meetingId: '994 2059 5047',
      passcode: '208885',
      url: 'https://zoom.us/j/99420595047?pwd=xaa2TCqZHiIZ6XS7JT14zxlkc6acap.1'
    },
    // üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    contact: {
      email: 'narasak@cpru.ac.th',
      lineId: '@narasak_poo'
    },
    // üè¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
    organization: {
      teamName: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥',
      slogan: 'üöÄ "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"'
    }
  }
};

function doPost(e) {
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getActiveSheet();
    
    console.log('Received request:', e);
    
    let data;
    if (e.postData && e.postData.contents) {
      // Handle JSON data from fetch request
      try {
        data = JSON.parse(e.postData.contents);
        console.log('Parsed JSON data:', data);
      } catch (jsonError) {
        console.log('JSON parsing failed, using form data:', jsonError);
        data = e.parameter;
      }
    } else {
      // Handle form data from fallback submission (‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á)
      data = e.parameter;
      console.log('Using form parameter data:', data);
    }
    
    // Add headers if this is the first row
    if (sheet.getLastRow() === 0) {
      sheet.appendRow([
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤',
        '‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠',
        '‡∏ä‡∏∑‡πà‡∏≠',
        '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', 
        '‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
        '‡πÄ‡∏û‡∏®',
        '‡∏≠‡∏≤‡∏¢‡∏∏',
        '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô / ‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô',
        '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á / ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö CPRU',
        '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ',
        '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°',
        '‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°',
        '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ',
        '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à',
        '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
      ]);
      
      // Format header row
      const headerRange = sheet.getRange(1, 1, 1, 18);
      headerRange.setBackground('#4285f4');
      headerRange.setFontColor('white');
      headerRange.setFontWeight('bold');
    }
    
    // Add the new registration data
    sheet.appendRow([
      data.timestamp || new Date().toLocaleString('th-TH', {
        timeZone: 'Asia/Bangkok',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      data.prefix || '',
      data.firstName || '',
      data.lastName || '',
      data.email || '',
      data.gender || '',
      data.age || '',
      data.phone || '',
      data.organization || '',
      data.position || '',
      data.cpruAffiliation || '',
      data.otherContact || '',
      data.experience || '',
      data.programmingLanguages || '',
      data.expectations || '',
      data.howDidYouHear || '',
      data.topics || '',
      data.additionalFeedback || ''
    ]);
    
    // Auto-resize columns
    sheet.autoResizeColumns(1, 18);
    
    // Send confirmation email
    if (data.email && data.firstName) {
      try {
        sendConfirmationEmail(data);
      } catch (emailError) {
        console.error('Email sending failed:', emailError);
        // Don't fail the registration if email fails
      }
    }
    
    // Return success response with CORS headers
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        timestamp: new Date().toISOString()
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Max-Age': '86400'
      });
      
  } catch (error) {
    console.error('Error in doPost:', error);
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.toString(),
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization'
      });
  }
}

// Create a response with proper CORS headers
function createResponse(data, statusCode = 200) {
  const response = ContentService.createTextOutput(JSON.stringify(data));
  
  // Set CORS headers
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
    'Access-Control-Max-Age': '3600',
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  };
  
  // Set all headers
  for (const [key, value] of Object.entries(headers)) {
    response.setHeader(key, value);
  }
  
  // Set status code if provided
  if (statusCode) {
    response.setMimeType(ContentService.MimeType.JSON).setStatusCode(statusCode);
  } else {
    response.setMimeType(ContentService.MimeType.JSON);
  }
  
  return response;
}

// Handle GET requests (for registration count)
function doGet(e) {
  try {
    const action = e.parameter.action;
    console.log('Received GET request with action:', action);
    
    if (action === 'count') {
      try {
        const count = getRegistrationCount();
        console.log('Current registration count:', count);
        
        return createResponse({
          success: true,
          count: count,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        console.error('Error getting registration count:', error);
        return createResponse({
          success: false,
          error: error.toString(),
          message: 'Failed to get registration count'
        }, 500);
      }
    }
    
    if (action === 'dashboard') {
      try {
        const stats = getRegistrationStats();
        console.log('Dashboard stats:', stats);
        
        return createResponse({
          success: true,
          data: stats,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        console.error('Error getting dashboard stats:', error);
        return createResponse({
          success: false,
          error: error.toString(),
          message: 'Failed to get dashboard stats'
        }, 500);
      }
    }
    
    if (action === 'analytics') {
      try {
        const stats = getRegistrationStats();
        console.log('Analytics stats:', stats);
        
        return createResponse({
          success: true,
          data: stats,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        console.error('Error getting analytics stats:', error);
        return createResponse({
          success: false,
          error: error.toString(),
          message: 'Failed to get analytics stats'
        }, 500);
      }
    }
    
    // Handle other GET actions or return 404
    return createResponse({
      success: false,
      message: 'Invalid action',
      availableActions: ['count', 'dashboard', 'analytics']
    }, 400);
      
  } catch (error) {
    console.error('Error in doGet:', error);
    return createResponse({
      success: false,
      error: error.toString(),
      message: 'Internal server error'
    }, 500);
  }
}

// Handle OPTIONS requests for CORS preflight
function doOptions(e) {
  return ContentService
    .createTextOutput('')
    .setMimeType(ContentService.MimeType.JSON)
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
      'Access-Control-Max-Age': '3600',
      'Access-Control-Allow-Credentials': 'true'
    });
}

// Send confirmation email to registrant
function sendConfirmationEmail(data) {
  const subject = CONFIG.EMAIL_TEMPLATE.subject;
  const htmlBody = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
        .info-box { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }
        .footer { text-align: center; color: #666; font-size: 14px; margin-top: 30px; }
        .highlight { color: #667eea; font-weight: bold; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üéâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h1>
          <p><h3>‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î</h3></p>
        </div>
        <div class="content">
          <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ${data.prefix ? data.prefix : ''}${data.firstName} ${data.lastName}</p>
          
          <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏ö‡∏£‡∏° <strong>"${CONFIG.WORKSHOP_INFO.title}"</strong> <br>‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
          
          <div class="info-box">
            <h3>üìö ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</h3>
            <ul>
              <li><strong>Vibe Coding:</strong> ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</li>
              <li><strong>Spec-Driven Development:</strong> ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î</li>
              <li><strong>Context Engineering:</strong> ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI</li>
            </ul>
          </div>

          <div class="info-box">
            <h3>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> ${data.prefix ? data.prefix + ' ' : ''}${data.firstName} ${data.lastName}</p>
            <p><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> ${data.email}</p>
            <p><strong>‡πÄ‡∏û‡∏®:</strong> ${data.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' : data.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : data.gender || '-'}</p>
            <p><strong>‡∏≠‡∏≤‡∏¢‡∏∏:</strong> ${data.age || '-'}</p>
            <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${data.phone}</p>
            <p><strong>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô/‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô:</strong> ${data.organization}</p>
            <p><strong>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> ${data.position}</p>
            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö CPRU:</strong> ${(() => {
              switch(data.cpruAffiliation) {
                case 'current-student': return '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
                case 'alumni': return '‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤ CPRU';
                case 'staff': return '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ (‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå, ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)';
                case 'general-public': return '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Äì ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á';
                default: return data.cpruAffiliation || '-';
              }
            })()}</p>
            ${data.otherContact ? `<p><strong>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô:</strong> ${data.otherContact}</p>` : ''}
            <p><strong>‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå:</strong> ${data.experience}</p>
            <p><strong>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°:</strong> ${(() => {
              switch(data.howDidYouHear) {
                case 'organizer': return '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô / ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£';
                case 'friend': return '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô / ‡∏Ñ‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå';
                case 'website': return '‡πÄ‡∏û‡∏à‡∏≠‡∏∑‡πà‡∏ô ‡πÜ / ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£';
                case 'line': return 'Line Group';
                case 'google': return '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Google';
                case 'other': return '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÜ';
                default: return data.howDidYouHear || '-';
              }
            })()}</p>
            <p><strong>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à:</strong> ${data.topics}</p>
            ${data.additionalFeedback ? `<p><strong>‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</strong> ${data.additionalFeedback}</p>` : ''}
          </div>

          <div class="info-box" style="background: #e8f5e8; border-left: 4px solid #28a745;">
            <h3>üéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</h3>
            <p><strong>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${CONFIG.WORKSHOP_INFO.date}</p>
            <p><strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${CONFIG.WORKSHOP_INFO.time}</p>
            <p><strong>üìç ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:</strong> ${CONFIG.WORKSHOP_INFO.format}</p>
          </div>

          <div class="info-box" style="background: #fff3cd; border-left: 4px solid #ffc107;">
            <h3>üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</h3>
            <p><strong>Zoom Meeting:</strong></p>
            <p style="background: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace;">
              <strong>Meeting ID:</strong> ${CONFIG.WORKSHOP_INFO.zoom.meetingId}<br>
              <strong>Passcode:</strong> ${CONFIG.WORKSHOP_INFO.zoom.passcode}<br>
              <strong>Link:</strong> <a href="${CONFIG.WORKSHOP_INFO.zoom.url}" style="color: #667eea; text-decoration: none;">${CONFIG.WORKSHOP_INFO.zoom.url}</a>
            </p>
            <p style="color: #856404; font-size: 14px;">
              üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ö‡∏£‡∏° 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ
            </p>
          </div>
          
          <div class="info-box">
            <h3>üìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß</h3>
            <ul>
              <li>üíª ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£</li>
              <li>üéß ‡∏´‡∏π‡∏ü‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á</li>
              <li>üìù ‡∏™‡∏°‡∏∏‡∏î‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</li>
              <li>‚òï ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏°‡πÄ‡∏ö‡∏≤‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å ^^</li>
            </ul>
          </div>

          <p><strong>üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°:</strong></p>
          <ul>
            <li>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${CONFIG.WORKSHOP_INFO.contact.email}</li>
            <li>üì± Line ID: ${CONFIG.WORKSHOP_INFO.contact.lineId}</li>
            <li>üí¨ Facebook Messenger: <a href="https://m.me/narasakp" style="color: #667eea; text-decoration: none;" target="_blank">facebook.com/narasakp</a></li>
          </ul>
          
        </div>
      </div>
    </body>
    </html>
  `;
  
  MailApp.sendEmail({
    to: data.email,
    subject: subject,
    htmlBody: htmlBody,
    name: CONFIG.EMAIL_TEMPLATE.fromName
  });
  
  console.log('Confirmation email sent to:', data.email);
}

// Get registration statistics for dashboard
function getRegistrationStats() {
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getActiveSheet();
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { totalRegistrations: 0, stats: {} };
    }
    
    const registrations = data.slice(1); // Remove header row
    const stats = {
      totalRegistrations: registrations.length,
      byExperience: {},
      byOrganization: {},
      byTopics: {},
      byLanguages: {},
      recentRegistrations: registrations.slice(-5).reverse(),
      registrationsByDay: {}
    };
    
    registrations.forEach(row => {
      const [timestamp, firstName, lastName, email, phone, org, position, exp, languages, expectations, topics] = row;
      
      // Count by experience
      if (exp) {
        stats.byExperience[exp] = (stats.byExperience[exp] || 0) + 1;
      }
      
      // Count by organization
      if (org) {
        stats.byOrganization[org] = (stats.byOrganization[org] || 0) + 1;
      }
      
      // Count by topics
      if (topics) {
        topics.split(',').forEach(topic => {
          const cleanTopic = topic.trim();
          if (cleanTopic) {
            stats.byTopics[cleanTopic] = (stats.byTopics[cleanTopic] || 0) + 1;
          }
        });
      }
      
      // Count by programming languages
      if (languages) {
        languages.split(',').forEach(lang => {
          const cleanLang = lang.trim();
          if (cleanLang) {
            stats.byLanguages[cleanLang] = (stats.byLanguages[cleanLang] || 0) + 1;
          }
        });
      }
      
      // Count by day
      if (timestamp) {
        const date = new Date(timestamp).toDateString();
        stats.registrationsByDay[date] = (stats.registrationsByDay[date] || 0) + 1;
      }
    });
    
    return stats;
  } catch (error) {
    console.error('Error getting stats:', error);
    return { error: error.toString() };
  }
}

// Get registration count
function getRegistrationCount() {
  try {
    console.log('Getting registration count...');
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Spreadsheet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (!spreadsheet) {
      console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö Spreadsheet ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return 0;
    }
    
    const sheet = spreadsheet.getActiveSheet();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Sheet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (!sheet) {
      console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return 0;
    }
    
    const lastRow = sheet.getLastRow();
    // ‡∏´‡∏±‡∏Å 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header row ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const count = lastRow > 1 ? lastRow - 1 : 0;
    
    console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', lastRow);
    console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠):', count);
    
    return count;
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:', error);
    return 0; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw error
  }
}

// API endpoint for dashboard
function doGet(e) {
  const action = e.parameter.action;
  let response;
  
  try {
    if (action === 'stats') {
      const stats = getRegistrationStats();
      response = ContentService.createTextOutput(JSON.stringify(stats));
    } 
    else if (action === 'count') {
      const count = getRegistrationCount();
      response = ContentService.createTextOutput(JSON.stringify({ count }));
    }
    else {
      response = ContentService.createTextOutput(
        JSON.stringify({ error: 'Invalid action' })
      );
    }
    
    // Set common headers for all responses
    return response
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
        'Access-Control-Allow-Credentials': 'true',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      });
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({ 
        error: error.toString(),
        message: error.message 
      }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With'
      });
  }
  
  return ContentService
    .createTextOutput('Google Apps Script is running. Use POST method to submit data or GET with action=stats for dashboard.')
    .setHeaders({
      'Access-Control-Allow-Origin': '*'
    });
}

// Test function to verify the script works
function testScript() {
  const testData = {
    firstName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
    email: 'test@example.com',
    phone: '0812345678',
    organization: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    position: '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤',
    experience: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 1-3 ‡∏õ‡∏µ',
    programmingLanguages: 'JavaScript, Python',
    expectations: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î',
    topics: 'Vibe Coding, Spec-Driven Development'
  };
  
  const mockEvent = {
    parameter: testData
  };
  
  const result = doPost(mockEvent);
  console.log('Test result:', result.getContent());
}
